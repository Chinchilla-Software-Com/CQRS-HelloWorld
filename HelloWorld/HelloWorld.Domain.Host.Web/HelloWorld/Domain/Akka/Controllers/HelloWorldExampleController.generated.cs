//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#region Copyright
// -----------------------------------------------------------------------
// <copyright company="cdmdotnet Limited">
//     Copyright cdmdotnet Limited. All rights reserved.
// </copyright>
// -----------------------------------------------------------------------
#endregion
using Cqrs.Domain;
using HelloWorld.Domain.Akka.Events;
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.ServiceModel;
using System.Text;
using System;
using System.Collections.Generic;
using System.Web.Http;

using cdmdotnet.Logging;
using Cqrs.Authentication;
using Cqrs.Commands;
using Cqrs.Events;
using Cqrs.Repositories.Queries;
using Cqrs.Services;
using Cqrs.WebApi;

using HelloWorld.Domain.Akka;
using HelloWorld.Domain.Akka.Commands;
using HelloWorld.Domain.Akka.Repositories;
using HelloWorld.Domain.Akka.Services;

namespace HelloWorld.Domain.Akka.Controllers
{
	/// <summary>
	/// An <see cref="CqrsEventApiController{TSingleSignOnToken}">API controller</see> for all publically exposed <see cref="HelloWorldExample">HelloWorldExample</see> methods and queries.
	/// <see cref="HelloWorldExample">HelloWorldExample</see> is described as:
	/// 
	/// </summary>
	/// <remarks>
	/// Ensure you include the nuget package Cqrs.WebApi.
	/// For automatic help documentation generation visit 
	/// https://www.asp.net/web-api/overview/getting-started-with-aspnet-web-api/creating-api-help-pages
	/// and start at the section "Adding Help Pages to an Existing Project".
	/// Then enable XML documentation for all projects for both DEBUG and RELEASE builds.
	/// </remarks>
	[GeneratedCode("CQRS UML Code Generator", "1.601.932")]
	[RoutePrefix("Akka/HelloWorldExample")]
	public  partial class HelloWorldExampleController
		: CqrsEventApiController<Cqrs.Authentication.SingleSignOnToken>
		, IHelloWorldExampleService
	{
		protected ICommandPublisher<Cqrs.Authentication.SingleSignOnToken> CommandPublisher { get; private set; }

		protected IUnitOfWorkService UnitOfWorkService { get; private set;}

		protected IQueryFactory QueryFactory { get; private set; }

		/// <summary>
		/// Instantiate a new instance of the <see cref="HelloWorldExampleController"/> class
		/// </summary>
		public HelloWorldExampleController(ILogger logger, ICorrelationIdHelper correlationIdHelper, IAuthenticationTokenHelper<Cqrs.Authentication.SingleSignOnToken> authenticationTokenHelper, IEventStore<Cqrs.Authentication.SingleSignOnToken> eventStore, ICommandPublisher<Cqrs.Authentication.SingleSignOnToken> commandPublisher, IUnitOfWorkService unitOfWorkService, IQueryFactory queryFactory)
			: base(logger, correlationIdHelper, authenticationTokenHelper, eventStore)
		{
			CommandPublisher = commandPublisher;
			UnitOfWorkService = unitOfWorkService;
			QueryFactory = queryFactory;
		}

		#region SayHelloWorld

		[Route("SayHelloWorld")]
		[HttpPost]
		public virtual IServiceResponse SayHelloWorld([FromBody]HelloWorldExampleSayHelloWorldParameters parameters)
		{
			return SayHelloWorld(CreateRequestWithData<Cqrs.Authentication.SingleSignOnToken, HelloWorldExampleSayHelloWorldParameters>(() => parameters));
		}

		IServiceResponse IHelloWorldExampleService.SayHelloWorld(IServiceRequestWithData<Cqrs.Authentication.SingleSignOnToken, HelloWorldExampleSayHelloWorldParameters> serviceRequest)
		{
			return SayHelloWorld(serviceRequest);
		}

		protected virtual IServiceResponse SayHelloWorld(IServiceRequestWithData<Cqrs.Authentication.SingleSignOnToken, HelloWorldExampleSayHelloWorldParameters> serviceRequest)
		{
			Logger.LogDebug("Entered", "HelloWorldExample/SayHelloWorld");

			AuthenticationTokenHelper.SetAuthenticationToken(serviceRequest.AuthenticationToken);
			CorrelationIdHelper.SetCorrelationId(serviceRequest.CorrelationId);
			UnitOfWorkService.SetCommitter(this);
			HelloWorldExampleSayHelloWorldParameters item = serviceRequest.Data;

			var command = new SayHelloWorldCommand(rsn: item.Rsn, firstName: item.FirstName);
			ServiceResponseStateType? serviceResponseStateType = null;
			Logger.LogDebug("Pre", "HelloWorldExample/SayHelloWorld/OnSayHelloWorld");
			OnSayHelloWorld(serviceRequest, ref command, ref serviceResponseStateType);
			Logger.LogDebug("Post", "HelloWorldExample/SayHelloWorld/OnSayHelloWorld");
			if (serviceResponseStateType != null && serviceResponseStateType != ServiceResponseStateType.Succeeded)
				return CompleteResponse(new ServiceResponse { State = serviceResponseStateType.Value });

			Logger.LogDebug("Pre", "HelloWorldExample/SayHelloWorld/PublishCommand");
			CommandPublisher.Publish(command);
			Logger.LogDebug("Post", "HelloWorldExample/SayHelloWorld/PublishCommand");
			Logger.LogDebug("Pre", "HelloWorldExample/SayHelloWorld/OnSayHelloWorldHandled");
			OnSayHelloWorldHandled(serviceRequest, ref command, ref serviceResponseStateType);
			Logger.LogDebug("Post", "HelloWorldExample/SayHelloWorld/OnSayHelloWorldHandled");
			if (serviceResponseStateType != null && serviceResponseStateType != ServiceResponseStateType.Succeeded)
				return CompleteResponse(new ServiceResponse { State = serviceResponseStateType.Value });

			UnitOfWorkService.Commit(this);

			Logger.LogDebug("Exited", "HelloWorldExample/SayHelloWorld");
			return CompleteResponse(new ServiceResponse());
		}

		partial void OnSayHelloWorld(IServiceRequestWithData<Cqrs.Authentication.SingleSignOnToken, HelloWorldExampleSayHelloWorldParameters> serviceRequest, ref SayHelloWorldCommand command, ref ServiceResponseStateType? serviceResponseStateType);

		partial void OnSayHelloWorldHandled(IServiceRequestWithData<Cqrs.Authentication.SingleSignOnToken, HelloWorldExampleSayHelloWorldParameters> serviceRequest, ref SayHelloWorldCommand command, ref ServiceResponseStateType? serviceResponseStateType);

		#endregion

		#region ReplyToHelloWorld

		[Route("ReplyToHelloWorld")]
		[HttpPost]
		public virtual IServiceResponse ReplyToHelloWorld([FromBody]HelloWorldExampleReplyToHelloWorldParameters parameters)
		{
			return ReplyToHelloWorld(CreateRequestWithData<Cqrs.Authentication.SingleSignOnToken, HelloWorldExampleReplyToHelloWorldParameters>(() => parameters));
		}

		IServiceResponse IHelloWorldExampleService.ReplyToHelloWorld(IServiceRequestWithData<Cqrs.Authentication.SingleSignOnToken, HelloWorldExampleReplyToHelloWorldParameters> serviceRequest)
		{
			return ReplyToHelloWorld(serviceRequest);
		}

		protected virtual IServiceResponse ReplyToHelloWorld(IServiceRequestWithData<Cqrs.Authentication.SingleSignOnToken, HelloWorldExampleReplyToHelloWorldParameters> serviceRequest)
		{
			Logger.LogDebug("Entered", "HelloWorldExample/ReplyToHelloWorld");

			AuthenticationTokenHelper.SetAuthenticationToken(serviceRequest.AuthenticationToken);
			CorrelationIdHelper.SetCorrelationId(serviceRequest.CorrelationId);
			UnitOfWorkService.SetCommitter(this);
			HelloWorldExampleReplyToHelloWorldParameters item = serviceRequest.Data;

			var command = new ReplyToHelloWorldCommand(rsn: item.Rsn, firstName: item.FirstName);
			ServiceResponseStateType? serviceResponseStateType = null;
			Logger.LogDebug("Pre", "HelloWorldExample/ReplyToHelloWorld/OnReplyToHelloWorld");
			OnReplyToHelloWorld(serviceRequest, ref command, ref serviceResponseStateType);
			Logger.LogDebug("Post", "HelloWorldExample/ReplyToHelloWorld/OnReplyToHelloWorld");
			if (serviceResponseStateType != null && serviceResponseStateType != ServiceResponseStateType.Succeeded)
				return CompleteResponse(new ServiceResponse { State = serviceResponseStateType.Value });

			Logger.LogDebug("Pre", "HelloWorldExample/ReplyToHelloWorld/PublishCommand");
			CommandPublisher.Publish(command);
			Logger.LogDebug("Post", "HelloWorldExample/ReplyToHelloWorld/PublishCommand");
			Logger.LogDebug("Pre", "HelloWorldExample/ReplyToHelloWorld/OnReplyToHelloWorldHandled");
			OnReplyToHelloWorldHandled(serviceRequest, ref command, ref serviceResponseStateType);
			Logger.LogDebug("Post", "HelloWorldExample/ReplyToHelloWorld/OnReplyToHelloWorldHandled");
			if (serviceResponseStateType != null && serviceResponseStateType != ServiceResponseStateType.Succeeded)
				return CompleteResponse(new ServiceResponse { State = serviceResponseStateType.Value });

			UnitOfWorkService.Commit(this);

			Logger.LogDebug("Exited", "HelloWorldExample/ReplyToHelloWorld");
			return CompleteResponse(new ServiceResponse());
		}

		partial void OnReplyToHelloWorld(IServiceRequestWithData<Cqrs.Authentication.SingleSignOnToken, HelloWorldExampleReplyToHelloWorldParameters> serviceRequest, ref ReplyToHelloWorldCommand command, ref ServiceResponseStateType? serviceResponseStateType);

		partial void OnReplyToHelloWorldHandled(IServiceRequestWithData<Cqrs.Authentication.SingleSignOnToken, HelloWorldExampleReplyToHelloWorldParameters> serviceRequest, ref ReplyToHelloWorldCommand command, ref ServiceResponseStateType? serviceResponseStateType);

		#endregion

		#region EndConversation

		[Route("EndConversation")]
		[HttpPost]
		public virtual IServiceResponse EndConversation([FromBody]HelloWorldExampleEndConversationParameters parameters)
		{
			return EndConversation(CreateRequestWithData<Cqrs.Authentication.SingleSignOnToken, HelloWorldExampleEndConversationParameters>(() => parameters));
		}

		IServiceResponse IHelloWorldExampleService.EndConversation(IServiceRequestWithData<Cqrs.Authentication.SingleSignOnToken, HelloWorldExampleEndConversationParameters> serviceRequest)
		{
			return EndConversation(serviceRequest);
		}

		protected virtual IServiceResponse EndConversation(IServiceRequestWithData<Cqrs.Authentication.SingleSignOnToken, HelloWorldExampleEndConversationParameters> serviceRequest)
		{
			Logger.LogDebug("Entered", "HelloWorldExample/EndConversation");

			AuthenticationTokenHelper.SetAuthenticationToken(serviceRequest.AuthenticationToken);
			CorrelationIdHelper.SetCorrelationId(serviceRequest.CorrelationId);
			UnitOfWorkService.SetCommitter(this);
			HelloWorldExampleEndConversationParameters item = serviceRequest.Data;

			var command = new EndConversationCommand(rsn: item.Rsn, firstName: item.FirstName);
			ServiceResponseStateType? serviceResponseStateType = null;
			Logger.LogDebug("Pre", "HelloWorldExample/EndConversation/OnEndConversation");
			OnEndConversation(serviceRequest, ref command, ref serviceResponseStateType);
			Logger.LogDebug("Post", "HelloWorldExample/EndConversation/OnEndConversation");
			if (serviceResponseStateType != null && serviceResponseStateType != ServiceResponseStateType.Succeeded)
				return CompleteResponse(new ServiceResponse { State = serviceResponseStateType.Value });

			Logger.LogDebug("Pre", "HelloWorldExample/EndConversation/PublishCommand");
			CommandPublisher.Publish(command);
			Logger.LogDebug("Post", "HelloWorldExample/EndConversation/PublishCommand");
			Logger.LogDebug("Pre", "HelloWorldExample/EndConversation/OnEndConversationHandled");
			OnEndConversationHandled(serviceRequest, ref command, ref serviceResponseStateType);
			Logger.LogDebug("Post", "HelloWorldExample/EndConversation/OnEndConversationHandled");
			if (serviceResponseStateType != null && serviceResponseStateType != ServiceResponseStateType.Succeeded)
				return CompleteResponse(new ServiceResponse { State = serviceResponseStateType.Value });

			UnitOfWorkService.Commit(this);

			Logger.LogDebug("Exited", "HelloWorldExample/EndConversation");
			return CompleteResponse(new ServiceResponse());
		}

		partial void OnEndConversation(IServiceRequestWithData<Cqrs.Authentication.SingleSignOnToken, HelloWorldExampleEndConversationParameters> serviceRequest, ref EndConversationCommand command, ref ServiceResponseStateType? serviceResponseStateType);

		partial void OnEndConversationHandled(IServiceRequestWithData<Cqrs.Authentication.SingleSignOnToken, HelloWorldExampleEndConversationParameters> serviceRequest, ref EndConversationCommand command, ref ServiceResponseStateType? serviceResponseStateType);

		#endregion

		/// <summary>
		/// Query for all the events that match the provided CorrelationId.
		/// </summary>
		/// <param name="correlationId">The CorrelationId of the matching events.</param>
		/// <returns>A <see cref="IServiceResponseWithResultData{TResultData}">service-response</see> with a collection of <see cref="EventData">event data</see></returns>
		[Route("GetEventData/{correlationId:guid}")]
		[HttpGet]
		public virtual IServiceResponseWithResultData<IEnumerable<EventData>> GetEventData(Guid correlationId)
		{
			return GetEventData(CreateRequestWithData<Cqrs.Authentication.SingleSignOnToken, Guid>(() => correlationId));
		}
	}
}
