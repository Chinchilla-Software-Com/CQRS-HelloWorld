//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#region Copyright
// -----------------------------------------------------------------------
// <copyright company="cdmdotnet Limited">
//     Copyright cdmdotnet Limited. All rights reserved.
// </copyright>
// -----------------------------------------------------------------------
#endregion
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using cdmdotnet.AutoMapper;
using cdmdotnet.Logging;
using Cqrs.Events;
using Cqrs.Domain;
using HelloWorld.Domain.Akka.Entities.Repositories;

namespace HelloWorld.Domain.Akka.Entities.EventHandlers
{
	[GeneratedCode("CQRS UML Code Generator", "1.601.932")]
	public  partial class DailyNewConversationsReportEventHandler
		: IEventHandler<Cqrs.Authentication.SingleSignOnToken, HelloWorld.Domain.Akka.Events.HelloWorldSaid>
	{

		public DailyNewConversationsReportEventHandler(ILogger logger, IAutomapHelper automapHelper, IDailyNewConversationsReportRepository dailyNewConversationsReportRepository)
		{
			Logger = logger;
			AutomapHelper = automapHelper;
			DailyNewConversationsReportRepository = dailyNewConversationsReportRepository;
		}

		protected ILogger Logger { get; private set; }

		protected IAutomapHelper AutomapHelper { get; private set; }

		protected IDailyNewConversationsReportRepository DailyNewConversationsReportRepository { get; private set; }

		#region Implementation of IEventHandler<in HelloWorld.Domain.Akka.Events.HelloWorldSaid>

		public void Handle(HelloWorld.Domain.Akka.Events.HelloWorldSaid @event)
		{
			string eventTypeName = @event.GetType().FullName;
			OnHandle(@event);

			var entities = new List<DailyNewConversationsReport>();

			bool singleItemNotCollection = true;
			OnPreGet(@event, ref singleItemNotCollection);
			if (singleItemNotCollection)
			{
				DailyNewConversationsReport entity = null;
				OnGetEntity(@event, ref entity);
				if (entity == null)
				{
					Guid? rsn = null;
					bool throwExceptionOnMissingEntity = true;
					GetSingleEntityRsn(@event, ref rsn, ref throwExceptionOnMissingEntity);
					if (rsn == null)
						rsn = @event.Rsn;
					else
						Logger.LogDebug(string.Format("Event type '{0}' with Rsn '{1:N}': Rsn manually provided.", eventTypeName, @event.Rsn));
					if (!throwExceptionOnMissingEntity)
						Logger.LogDebug(string.Format("Event type '{0}' with Rsn '{1:N}': Can expect no value from the repository without an exception.", eventTypeName, @event.Rsn));
					entity = DailyNewConversationsReportRepository.Load(rsn.Value, throwExceptionOnMissingEntity) ?? new DailyNewConversationsReport{ Rsn = rsn.Value };
				}
				else
					Logger.LogDebug(string.Format("Event type '{0}' with Rsn '{1:N}': Entity manually provided.", eventTypeName, @event.Rsn));
				OnGotEntity(@event, ref entity);
				entities.Add(entity);
			}
			else
			{
				Logger.LogDebug(string.Format("Event type '{0}' with Rsn '{1:N}': Several entities will be loaded manually.", eventTypeName, @event.Rsn));
				IEnumerable<DailyNewConversationsReport> manualEntities = null;
				OnGetEntities(@event, ref manualEntities);
				if (manualEntities != null)
					entities.AddRange(manualEntities);
			}
			for (int i = 0; i < entities.Count; i++)
			{
				DailyNewConversationsReport entity = entities[i];

				bool autoMap = true;
				OnUpdateEntity(@event, ref entity, ref autoMap);
				if (autoMap)
					AutomapHelper.Automap(@event, entity);
				else
					Logger.LogDebug(string.Format("Event type '{0}' with Rsn '{1:N}': Is not auto-mapped.", eventTypeName, @event.Rsn));
				OnEntityUpdated(@event, ref entity);

				bool continueWithRepositorySave = true;
				bool createDontUpdate = false;
				OnSaveEntity(@event, ref entity, ref continueWithRepositorySave, ref createDontUpdate);
				if (continueWithRepositorySave)
				{
					if (createDontUpdate)
					{
						DailyNewConversationsReportRepository.Create(entity);
						Logger.LogDebug(string.Format("Event type '{0}' with Rsn '{1:N}': Created in repository.", eventTypeName, @event.Rsn));
					}
					else
					{
						DailyNewConversationsReportRepository.Update(entity);
						Logger.LogDebug(string.Format("Event type '{0}' with Rsn '{1:N}': Updated in repository.", eventTypeName, @event.Rsn));
					}
				}
				else
					Logger.LogDebug(string.Format("Event type '{0}' with Rsn '{1:N}': Not auto-saving.", eventTypeName, @event.Rsn));
				OnEntitySaved(@event, ref entity);
			}
			OnHandled(@event);
		}

		#endregion

		#region Implementation of IEventHandler<in HelloWorld.Domain.Akka.Events.HelloWorldSaid> Partials

		partial void OnHandle(HelloWorld.Domain.Akka.Events.HelloWorldSaid @event);

		partial void OnPreGet(HelloWorld.Domain.Akka.Events.HelloWorldSaid @event, ref bool singleItemNotCollection);

		partial void GetSingleEntityRsn(HelloWorld.Domain.Akka.Events.HelloWorldSaid @event, ref Guid? rsn, ref bool throwExceptionOnMissingEntity);

		partial void OnGetEntities(HelloWorld.Domain.Akka.Events.HelloWorldSaid @event, ref IEnumerable<DailyNewConversationsReport> manualEntities);

		partial void OnGetEntity(HelloWorld.Domain.Akka.Events.HelloWorldSaid @event, ref DailyNewConversationsReport entity);

		partial void OnGotEntity(HelloWorld.Domain.Akka.Events.HelloWorldSaid @event, ref DailyNewConversationsReport entity);

		partial void OnUpdateEntity(HelloWorld.Domain.Akka.Events.HelloWorldSaid @event, ref DailyNewConversationsReport entity, ref bool autoMap);

		partial void OnEntityUpdated(HelloWorld.Domain.Akka.Events.HelloWorldSaid @event, ref DailyNewConversationsReport entity);

		partial void OnSaveEntity(HelloWorld.Domain.Akka.Events.HelloWorldSaid @event, ref DailyNewConversationsReport entity, ref bool continueWithRepositorySave, ref bool createDontUpdate);

		partial void OnEntitySaved(HelloWorld.Domain.Akka.Events.HelloWorldSaid @event, ref DailyNewConversationsReport entity);

		partial void OnHandled(HelloWorld.Domain.Akka.Events.HelloWorldSaid @event);

		#endregion
	}
}
