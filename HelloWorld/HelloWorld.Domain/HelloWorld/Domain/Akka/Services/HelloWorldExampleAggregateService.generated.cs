//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#region Copyright
// -----------------------------------------------------------------------
// <copyright company="cdmdotnet Limited">
//     Copyright cdmdotnet Limited. All rights reserved.
// </copyright>
// -----------------------------------------------------------------------
#endregion
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.ServiceModel;
using cdmdotnet.Logging;
using Cqrs.Authentication;
using Cqrs.Commands;
using Cqrs.Events;
using Cqrs.Repositories.Queries;
using Cqrs.Services;
using HelloWorld.Domain.Akka.Commands;

namespace HelloWorld.Domain.Akka.Services
{
	[GeneratedCode("CQRS UML Code Generator", "1.601.932")]
	[DataContract(Namespace="https://getcqrs.net/Domain/Akka/1001/")]
	public partial class HelloWorldExampleService : EventService<Cqrs.Authentication.SingleSignOnToken>, IHelloWorldExampleService
	{
		protected ICommandPublisher<Cqrs.Authentication.SingleSignOnToken> CommandPublisher { get; private set; }

		protected IUnitOfWorkService UnitOfWorkService { get; private set; }

		protected IQueryFactory QueryFactory { get; private set; }

		public HelloWorldExampleService(ICommandPublisher<Cqrs.Authentication.SingleSignOnToken> commandPublisher, IUnitOfWorkService unitOfWorkService, IQueryFactory queryFactory, IEventStore<Cqrs.Authentication.SingleSignOnToken> eventStore, IAuthenticationTokenHelper<Cqrs.Authentication.SingleSignOnToken> authenticationTokenHelper, ICorrelationIdHelper correlationIdHelper, ILogger logger)
			: base(eventStore, logger, correlationIdHelper, authenticationTokenHelper)
		{
			CommandPublisher = commandPublisher;
			UnitOfWorkService = unitOfWorkService;
			QueryFactory = queryFactory;
		}


		public IServiceResponse SayHelloWorld(IServiceRequestWithData<Cqrs.Authentication.SingleSignOnToken, HelloWorldExampleSayHelloWorldParameters> serviceRequest)
		{
			Logger.LogDebug("Entered", "HelloWorldExample/SayHelloWorld");

			AuthenticationTokenHelper.SetAuthenticationToken(serviceRequest.AuthenticationToken);
			CorrelationIdHelper.SetCorrelationId(serviceRequest.CorrelationId);
			UnitOfWorkService.SetCommitter(this);
			HelloWorldExampleSayHelloWorldParameters item = serviceRequest.Data;

			var command = new SayHelloWorldCommand(Guid.NewGuid(), item.FirstName);
			ServiceResponseStateType? serviceResponseStateType = null;
			Logger.LogDebug("Pre", "HelloWorldExample/SayHelloWorld/OnSayHelloWorld");
			OnSayHelloWorld(serviceRequest, ref command, ref serviceResponseStateType);
			Logger.LogDebug("Post", "HelloWorldExample/SayHelloWorld/OnSayHelloWorld");
			if (serviceResponseStateType != null && serviceResponseStateType != ServiceResponseStateType.Succeeded)
				return CompleteResponse(new ServiceResponse { State = serviceResponseStateType.Value });

			Logger.LogDebug("Pre", "HelloWorldExample/SayHelloWorld/PublishCommand");
			CommandPublisher.Publish(command);
			Logger.LogDebug("Post", "HelloWorldExample/SayHelloWorld/PublishCommand");
			Logger.LogDebug("Pre", "HelloWorldExample/SayHelloWorld/OnSayHelloWorldHandled");
			OnSayHelloWorldHandled(serviceRequest, ref command, ref serviceResponseStateType);
			Logger.LogDebug("Post", "HelloWorldExample/SayHelloWorld/OnSayHelloWorldHandled");
			if (serviceResponseStateType != null && serviceResponseStateType != ServiceResponseStateType.Succeeded)
				return CompleteResponse(new ServiceResponse { State = serviceResponseStateType.Value });

			UnitOfWorkService.Commit(this);
			return CompleteResponse(new ServiceResponse());

			Logger.LogDebug("Exited", "HelloWorldExample/SayHelloWorld");
		}

		partial void OnSayHelloWorld(IServiceRequestWithData<Cqrs.Authentication.SingleSignOnToken, HelloWorldExampleSayHelloWorldParameters> serviceRequest, ref SayHelloWorldCommand command, ref ServiceResponseStateType? serviceResponseStateType);

		partial void OnSayHelloWorldHandled(IServiceRequestWithData<Cqrs.Authentication.SingleSignOnToken, HelloWorldExampleSayHelloWorldParameters> serviceRequest, ref SayHelloWorldCommand command, ref ServiceResponseStateType? serviceResponseStateType);

		public IServiceResponse ReplyToHelloWorld(IServiceRequestWithData<Cqrs.Authentication.SingleSignOnToken, HelloWorldExampleReplyToHelloWorldParameters> serviceRequest)
		{
			Logger.LogDebug("Entered", "HelloWorldExample/ReplyToHelloWorld");

			AuthenticationTokenHelper.SetAuthenticationToken(serviceRequest.AuthenticationToken);
			CorrelationIdHelper.SetCorrelationId(serviceRequest.CorrelationId);
			UnitOfWorkService.SetCommitter(this);
			HelloWorldExampleReplyToHelloWorldParameters item = serviceRequest.Data;

			var command = new ReplyToHelloWorldCommand(item.Rsn, item.FirstName);
			ServiceResponseStateType? serviceResponseStateType = null;
			Logger.LogDebug("Pre", "HelloWorldExample/ReplyToHelloWorld/OnReplyToHelloWorld");
			OnReplyToHelloWorld(serviceRequest, ref command, ref serviceResponseStateType);
			Logger.LogDebug("Post", "HelloWorldExample/ReplyToHelloWorld/OnReplyToHelloWorld");
			if (serviceResponseStateType != null && serviceResponseStateType != ServiceResponseStateType.Succeeded)
				return CompleteResponse(new ServiceResponse { State = serviceResponseStateType.Value });

			Logger.LogDebug("Pre", "HelloWorldExample/ReplyToHelloWorld/PublishCommand");
			CommandPublisher.Publish(command);
			Logger.LogDebug("Post", "HelloWorldExample/ReplyToHelloWorld/PublishCommand");
			Logger.LogDebug("Pre", "HelloWorldExample/ReplyToHelloWorld/OnReplyToHelloWorldHandled");
			OnReplyToHelloWorldHandled(serviceRequest, ref command, ref serviceResponseStateType);
			Logger.LogDebug("Post", "HelloWorldExample/ReplyToHelloWorld/OnReplyToHelloWorldHandled");
			if (serviceResponseStateType != null && serviceResponseStateType != ServiceResponseStateType.Succeeded)
				return CompleteResponse(new ServiceResponse { State = serviceResponseStateType.Value });

			UnitOfWorkService.Commit(this);
			return CompleteResponse(new ServiceResponse());

			Logger.LogDebug("Exited", "HelloWorldExample/ReplyToHelloWorld");
		}

		partial void OnReplyToHelloWorld(IServiceRequestWithData<Cqrs.Authentication.SingleSignOnToken, HelloWorldExampleReplyToHelloWorldParameters> serviceRequest, ref ReplyToHelloWorldCommand command, ref ServiceResponseStateType? serviceResponseStateType);

		partial void OnReplyToHelloWorldHandled(IServiceRequestWithData<Cqrs.Authentication.SingleSignOnToken, HelloWorldExampleReplyToHelloWorldParameters> serviceRequest, ref ReplyToHelloWorldCommand command, ref ServiceResponseStateType? serviceResponseStateType);

		public IServiceResponse EndConversation(IServiceRequestWithData<Cqrs.Authentication.SingleSignOnToken, HelloWorldExampleEndConversationParameters> serviceRequest)
		{
			Logger.LogDebug("Entered", "HelloWorldExample/EndConversation");

			AuthenticationTokenHelper.SetAuthenticationToken(serviceRequest.AuthenticationToken);
			CorrelationIdHelper.SetCorrelationId(serviceRequest.CorrelationId);
			UnitOfWorkService.SetCommitter(this);
			HelloWorldExampleEndConversationParameters item = serviceRequest.Data;

			var command = new EndConversationCommand(item.Rsn, item.FirstName);
			ServiceResponseStateType? serviceResponseStateType = null;
			Logger.LogDebug("Pre", "HelloWorldExample/EndConversation/OnEndConversation");
			OnEndConversation(serviceRequest, ref command, ref serviceResponseStateType);
			Logger.LogDebug("Post", "HelloWorldExample/EndConversation/OnEndConversation");
			if (serviceResponseStateType != null && serviceResponseStateType != ServiceResponseStateType.Succeeded)
				return CompleteResponse(new ServiceResponse { State = serviceResponseStateType.Value });

			Logger.LogDebug("Pre", "HelloWorldExample/EndConversation/PublishCommand");
			CommandPublisher.Publish(command);
			Logger.LogDebug("Post", "HelloWorldExample/EndConversation/PublishCommand");
			Logger.LogDebug("Pre", "HelloWorldExample/EndConversation/OnEndConversationHandled");
			OnEndConversationHandled(serviceRequest, ref command, ref serviceResponseStateType);
			Logger.LogDebug("Post", "HelloWorldExample/EndConversation/OnEndConversationHandled");
			if (serviceResponseStateType != null && serviceResponseStateType != ServiceResponseStateType.Succeeded)
				return CompleteResponse(new ServiceResponse { State = serviceResponseStateType.Value });

			UnitOfWorkService.Commit(this);
			return CompleteResponse(new ServiceResponse());

			Logger.LogDebug("Exited", "HelloWorldExample/EndConversation");
		}

		partial void OnEndConversation(IServiceRequestWithData<Cqrs.Authentication.SingleSignOnToken, HelloWorldExampleEndConversationParameters> serviceRequest, ref EndConversationCommand command, ref ServiceResponseStateType? serviceResponseStateType);

		partial void OnEndConversationHandled(IServiceRequestWithData<Cqrs.Authentication.SingleSignOnToken, HelloWorldExampleEndConversationParameters> serviceRequest, ref EndConversationCommand command, ref ServiceResponseStateType? serviceResponseStateType);

		protected virtual TServiceResponse CompleteResponse<TServiceResponse>(TServiceResponse serviceResponse)
			where TServiceResponse : IServiceResponse
		{
			serviceResponse.CorrelationId = CorrelationIdHelper.GetCorrelationId();
			return serviceResponse;
		}
	}
}
