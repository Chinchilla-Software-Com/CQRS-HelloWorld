//------------------------------------------------------------------------------
// <auto-generated>
// 	This code was generated by a tool
// 	Changes to this file will be lost if the code is regenerated.
// EventToCommandHandlerTemplate.t4
// </auto-generated>
//------------------------------------------------------------------------------

#region Copyright
// -----------------------------------------------------------------------
// <copyright company="cdmdotnet Limited">
//     Copyright cdmdotnet Limited. All rights reserved.
// </copyright>
// -----------------------------------------------------------------------
#endregion

using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using Akka.Actor;
using Cqrs.Akka.Domain;
using Cqrs.Akka.Events;
using Cqrs.Authentication;
using cdmdotnet.AutoMapper;
using cdmdotnet.Logging;
using Cqrs.Commands;
using Cqrs.Events;
using Cqrs.Domain;

namespace HelloWorld.Domain.Akka.Events.Handlers
{
	/// <summary>
	/// Converts <see cref="HelloWorldRepliedTo"/> to a <see cref="HelloWorld.Domain.Akka.Commands.EndConversationCommand"/> and publish it using <see cref="CommandBus"/>
	/// </summary>
	[GeneratedCode("CQRS UML Code Generator", "1.601.932")]
	public partial class HelloWorldRepliedToToEndConversationEventToCommandHandler
		: IEventHandler<Cqrs.Authentication.SingleSignOnToken, HelloWorldRepliedTo>
	{
		protected ILogger Logger { get; private set; }

		protected IAutomapHelper AutomapHelper { get; private set; }

		/// <summary>
		/// Instantiates the <see cref="HelloWorldRepliedToToEndConversationEventToCommandHandler"/> class.
		/// </summary>
		public HelloWorldRepliedToToEndConversationEventToCommandHandler(ILogger logger, IAutomapHelper automapHelper)
		{
			Logger = logger;
			AutomapHelper = automapHelper;
		}

		protected IAkkaAggregateResolver AggregateResolver { get; private set; }

		/// <summary>
		/// Instantiates the <see cref="HelloWorldRepliedToToEndConversationEventToCommandHandler"/> class registering any <see cref="ReceiveActor.Receive{T}(System.Func{T,System.Threading.Tasks.Task})"/> required.
		/// </summary>
		public HelloWorldRepliedToToEndConversationEventToCommandHandler(IAkkaAggregateResolver aggregateResolver, ILogger logger, IAutomapHelper automapHelper)
			: this (logger, automapHelper)
		{
			AggregateResolver = aggregateResolver;
		}


		#region Implementation of IMessageHandler<in HelloWorldRepliedTo>

		public void Handle(HelloWorldRepliedTo @event)
		{
			global::Akka.Actor.IActorRef item = AggregateResolver.ResolveActor<Actor>();
			// bool result = global::Akka.Actor.Futures.Ask<bool>(item, @event).Result;
			global::Akka.Actor.ActorRefImplicitSenderExtensions.Tell(item, @event);
		}

		#endregion

		public partial class Actor
			: AkkaEventHandler<Cqrs.Authentication.SingleSignOnToken>
		{
			protected ICommandPublisher<Cqrs.Authentication.SingleSignOnToken> CommandBus { get; private set; }

			#region Implementation of IEventHandler<in HelloWorldRepliedToToEndConversation>

			/// <summary>
			/// Convert the provided <paramref name="@event"/> to a <see cref="HelloWorld.Domain.Akka.Commands.EndConversationCommand"/> and publish it using <see cref="CommandBus"/>
			/// </summary>
			public virtual void Handle(HelloWorldRepliedTo @event)
			{
				HelloWorld.Domain.Akka.Commands.EndConversationCommand command = null;
				OnHandle(@event, ref command);
				if (command != null)
					CommandBus.Publish(command);
				OnHandled(@event);
			}

			#endregion

			partial void OnHandle(HelloWorldRepliedTo @event, ref HelloWorld.Domain.Akka.Commands.EndConversationCommand command);

			partial void OnHandled(HelloWorldRepliedTo @event);

			public Actor(ILogger logger, ICorrelationIdHelper correlationIdHelper, IAuthenticationTokenHelper<Cqrs.Authentication.SingleSignOnToken> authenticationTokenHelper, Cqrs.Akka.Commands.IAkkaCommandSender<Cqrs.Authentication.SingleSignOnToken> commandBus)
				: base(logger, correlationIdHelper, authenticationTokenHelper)
			{
				CommandBus = commandBus;
				Receive<HelloWorldRepliedTo>(@event => Execute(Handle, @event));
			}
		}
	}
}
