//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#region Copyright
// -----------------------------------------------------------------------
// <copyright company="cdmdotnet Limited">
//     Copyright cdmdotnet Limited. All rights reserved.
// </copyright>
// -----------------------------------------------------------------------
#endregion
using Cqrs.Domain;
using HelloWorld.Domain.Akka.Events;
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.ServiceModel;
using System.Text;
using System.Xml;
using Cqrs.Events;
using Cqrs.Services;
using HelloWorld.Domain.Akka.Entities;

namespace HelloWorld.Domain.Akka.Services
{
	/// <summary>
	/// A <see cref="DataContractResolver"/> for using <see cref="IHelloWorldExampleService.SayHelloWorld"/> via WCF
	/// </summary>
	[GeneratedCode("CQRS UML Code Generator", "1.601.932")]
	public partial class HelloWorldExampleServiceSayHelloWorldParametersResolver : ServiceParameterResolver<IHelloWorldExampleService, Cqrs.Authentication.SingleSignOnToken>
	{
		public HelloWorldExampleServiceSayHelloWorldParametersResolver(ISingleSignOnTokenResolver singleSignOnTokenResolver, IEventDataResolver eventDataResolver)
			: base(singleSignOnTokenResolver, eventDataResolver)
		{
		}
		public HelloWorldExampleServiceSayHelloWorldParametersResolver()
			: base(new Cqrs.Authentication.SingleSignOnTokenResolver(), new EventDataResolver<Cqrs.Authentication.SingleSignOnToken>())
		{
		}

		public override bool TryResolveType(Type dataContractType, Type declaredType, DataContractResolver knownTypeResolver, out XmlDictionaryString typeName, out XmlDictionaryString typeNamespace)
		{
			if (dataContractType == typeof(ServiceRequestWithData<Cqrs.Authentication.SingleSignOnToken, HelloWorldExampleSayHelloWorldParameters>))
			{
				XmlDictionary dictionary = new XmlDictionary();
				typeName = dictionary.Add("HelloWorldExampleServiceSayHelloWorldParameters");
				typeNamespace = dictionary.Add(ServiceNamespace);
				return true;
			}

			/*
			if (dataContractType == typeof(ServiceResponseWithResultData<HelloWorldExampleEntity>))
			{
				XmlDictionary dictionary = new XmlDictionary();
				typeName = dictionary.Add("HelloWorldExampleServiceSayHelloWorldResponse");
				typeNamespace = dictionary.Add(ServiceNamespace);
				return true;
			}
			*/

			return base.TryResolveType(dataContractType, declaredType, knownTypeResolver, out typeName, out typeNamespace);
		}

		protected override bool TryResolveUnResolvedType(Type dataContractType, Type declaredType, DataContractResolver knownTypeResolver, ref XmlDictionaryString typeName, ref XmlDictionaryString typeNamespace)
		{
			bool result = false;
			TryResolveUnResolvedType(dataContractType, declaredType, knownTypeResolver, ref typeName, ref typeNamespace, ref result);
			return result;
		}

		partial void TryResolveUnResolvedType(Type dataContractType, Type declaredType, DataContractResolver knownTypeResolver, ref XmlDictionaryString typeName, ref XmlDictionaryString typeNamespace, ref bool result);

		/// <summary>
		/// Override this method to map the specified xsi:type name and namespace to a data contract type during deserialization.
		/// </summary>
		/// <returns>
		/// The type the xsi:type name and namespace is mapped to. 
		/// </returns>
		/// <param name="typeName">The xsi:type name to map.</param><param name="typeNamespace">The xsi:type namespace to map.</param><param name="declaredType">The type declared in the data contract.</param><param name="knownTypeResolver">The known type resolver.</param>
		public override Type ResolveName(string typeName, string typeNamespace, Type declaredType, DataContractResolver knownTypeResolver)
		{
			if (typeNamespace == ServiceNamespace)
			{
				if (typeName == "HelloWorldExampleServiceSayHelloWorldParameters")
					return typeof(ServiceRequestWithData<Cqrs.Authentication.SingleSignOnToken, HelloWorldExampleSayHelloWorldParameters>);

				/*
				if (typeName == "HelloWorldExampleServiceSayHelloWorldResponse")
					return typeof(ServiceResponseWithResultData<HelloWorldExampleEntity>);
				*/
			}

			return base.ResolveName(typeName, typeNamespace, declaredType, knownTypeResolver);
		}

		protected override Type ResolveUnResolvedName(string typeName, string typeNamespace, Type declaredType, DataContractResolver knownTypeResolver)
		{
			Type result = null;
			ResolveUnResolvedName(typeName, typeNamespace, declaredType, knownTypeResolver, ref result);
			return result;
		}

		partial void ResolveUnResolvedName(string typeName, string typeNamespace, Type declaredType, DataContractResolver knownTypeResolver, ref Type result);

		public static void RegisterDataContracts()
		{
			WcfDataContractResolverConfiguration.Current.RegisterDataContract<IHelloWorldExampleService, HelloWorldExampleServiceSayHelloWorldParametersResolver>("SayHelloWorld");
		}
	}
	/// <summary>
	/// A <see cref="DataContractResolver"/> for using <see cref="IHelloWorldExampleService.ReplyToHelloWorld"/> via WCF
	/// </summary>
	[GeneratedCode("CQRS UML Code Generator", "1.601.932")]
	public partial class HelloWorldExampleServiceReplyToHelloWorldParametersResolver : ServiceParameterResolver<IHelloWorldExampleService, Cqrs.Authentication.SingleSignOnToken>
	{
		public HelloWorldExampleServiceReplyToHelloWorldParametersResolver(ISingleSignOnTokenResolver singleSignOnTokenResolver, IEventDataResolver eventDataResolver)
			: base(singleSignOnTokenResolver, eventDataResolver)
		{
		}
		public HelloWorldExampleServiceReplyToHelloWorldParametersResolver()
			: base(new Cqrs.Authentication.SingleSignOnTokenResolver(), new EventDataResolver<Cqrs.Authentication.SingleSignOnToken>())
		{
		}

		public override bool TryResolveType(Type dataContractType, Type declaredType, DataContractResolver knownTypeResolver, out XmlDictionaryString typeName, out XmlDictionaryString typeNamespace)
		{
			if (dataContractType == typeof(ServiceRequestWithData<Cqrs.Authentication.SingleSignOnToken, HelloWorldExampleReplyToHelloWorldParameters>))
			{
				XmlDictionary dictionary = new XmlDictionary();
				typeName = dictionary.Add("HelloWorldExampleServiceReplyToHelloWorldParameters");
				typeNamespace = dictionary.Add(ServiceNamespace);
				return true;
			}

			/*
			if (dataContractType == typeof(ServiceResponseWithResultData<HelloWorldExampleEntity>))
			{
				XmlDictionary dictionary = new XmlDictionary();
				typeName = dictionary.Add("HelloWorldExampleServiceReplyToHelloWorldResponse");
				typeNamespace = dictionary.Add(ServiceNamespace);
				return true;
			}
			*/

			return base.TryResolveType(dataContractType, declaredType, knownTypeResolver, out typeName, out typeNamespace);
		}

		protected override bool TryResolveUnResolvedType(Type dataContractType, Type declaredType, DataContractResolver knownTypeResolver, ref XmlDictionaryString typeName, ref XmlDictionaryString typeNamespace)
		{
			bool result = false;
			TryResolveUnResolvedType(dataContractType, declaredType, knownTypeResolver, ref typeName, ref typeNamespace, ref result);
			return result;
		}

		partial void TryResolveUnResolvedType(Type dataContractType, Type declaredType, DataContractResolver knownTypeResolver, ref XmlDictionaryString typeName, ref XmlDictionaryString typeNamespace, ref bool result);

		/// <summary>
		/// Override this method to map the specified xsi:type name and namespace to a data contract type during deserialization.
		/// </summary>
		/// <returns>
		/// The type the xsi:type name and namespace is mapped to. 
		/// </returns>
		/// <param name="typeName">The xsi:type name to map.</param><param name="typeNamespace">The xsi:type namespace to map.</param><param name="declaredType">The type declared in the data contract.</param><param name="knownTypeResolver">The known type resolver.</param>
		public override Type ResolveName(string typeName, string typeNamespace, Type declaredType, DataContractResolver knownTypeResolver)
		{
			if (typeNamespace == ServiceNamespace)
			{
				if (typeName == "HelloWorldExampleServiceReplyToHelloWorldParameters")
					return typeof(ServiceRequestWithData<Cqrs.Authentication.SingleSignOnToken, HelloWorldExampleReplyToHelloWorldParameters>);

				/*
				if (typeName == "HelloWorldExampleServiceReplyToHelloWorldResponse")
					return typeof(ServiceResponseWithResultData<HelloWorldExampleEntity>);
				*/
			}

			return base.ResolveName(typeName, typeNamespace, declaredType, knownTypeResolver);
		}

		protected override Type ResolveUnResolvedName(string typeName, string typeNamespace, Type declaredType, DataContractResolver knownTypeResolver)
		{
			Type result = null;
			ResolveUnResolvedName(typeName, typeNamespace, declaredType, knownTypeResolver, ref result);
			return result;
		}

		partial void ResolveUnResolvedName(string typeName, string typeNamespace, Type declaredType, DataContractResolver knownTypeResolver, ref Type result);

		public static void RegisterDataContracts()
		{
			WcfDataContractResolverConfiguration.Current.RegisterDataContract<IHelloWorldExampleService, HelloWorldExampleServiceReplyToHelloWorldParametersResolver>("ReplyToHelloWorld");
		}
	}
	/// <summary>
	/// A <see cref="DataContractResolver"/> for using <see cref="IHelloWorldExampleService.EndConversation"/> via WCF
	/// </summary>
	[GeneratedCode("CQRS UML Code Generator", "1.601.932")]
	public partial class HelloWorldExampleServiceEndConversationParametersResolver : ServiceParameterResolver<IHelloWorldExampleService, Cqrs.Authentication.SingleSignOnToken>
	{
		public HelloWorldExampleServiceEndConversationParametersResolver(ISingleSignOnTokenResolver singleSignOnTokenResolver, IEventDataResolver eventDataResolver)
			: base(singleSignOnTokenResolver, eventDataResolver)
		{
		}
		public HelloWorldExampleServiceEndConversationParametersResolver()
			: base(new Cqrs.Authentication.SingleSignOnTokenResolver(), new EventDataResolver<Cqrs.Authentication.SingleSignOnToken>())
		{
		}

		public override bool TryResolveType(Type dataContractType, Type declaredType, DataContractResolver knownTypeResolver, out XmlDictionaryString typeName, out XmlDictionaryString typeNamespace)
		{
			if (dataContractType == typeof(ServiceRequestWithData<Cqrs.Authentication.SingleSignOnToken, HelloWorldExampleEndConversationParameters>))
			{
				XmlDictionary dictionary = new XmlDictionary();
				typeName = dictionary.Add("HelloWorldExampleServiceEndConversationParameters");
				typeNamespace = dictionary.Add(ServiceNamespace);
				return true;
			}

			/*
			if (dataContractType == typeof(ServiceResponseWithResultData<HelloWorldExampleEntity>))
			{
				XmlDictionary dictionary = new XmlDictionary();
				typeName = dictionary.Add("HelloWorldExampleServiceEndConversationResponse");
				typeNamespace = dictionary.Add(ServiceNamespace);
				return true;
			}
			*/

			return base.TryResolveType(dataContractType, declaredType, knownTypeResolver, out typeName, out typeNamespace);
		}

		protected override bool TryResolveUnResolvedType(Type dataContractType, Type declaredType, DataContractResolver knownTypeResolver, ref XmlDictionaryString typeName, ref XmlDictionaryString typeNamespace)
		{
			bool result = false;
			TryResolveUnResolvedType(dataContractType, declaredType, knownTypeResolver, ref typeName, ref typeNamespace, ref result);
			return result;
		}

		partial void TryResolveUnResolvedType(Type dataContractType, Type declaredType, DataContractResolver knownTypeResolver, ref XmlDictionaryString typeName, ref XmlDictionaryString typeNamespace, ref bool result);

		/// <summary>
		/// Override this method to map the specified xsi:type name and namespace to a data contract type during deserialization.
		/// </summary>
		/// <returns>
		/// The type the xsi:type name and namespace is mapped to. 
		/// </returns>
		/// <param name="typeName">The xsi:type name to map.</param><param name="typeNamespace">The xsi:type namespace to map.</param><param name="declaredType">The type declared in the data contract.</param><param name="knownTypeResolver">The known type resolver.</param>
		public override Type ResolveName(string typeName, string typeNamespace, Type declaredType, DataContractResolver knownTypeResolver)
		{
			if (typeNamespace == ServiceNamespace)
			{
				if (typeName == "HelloWorldExampleServiceEndConversationParameters")
					return typeof(ServiceRequestWithData<Cqrs.Authentication.SingleSignOnToken, HelloWorldExampleEndConversationParameters>);

				/*
				if (typeName == "HelloWorldExampleServiceEndConversationResponse")
					return typeof(ServiceResponseWithResultData<HelloWorldExampleEntity>);
				*/
			}

			return base.ResolveName(typeName, typeNamespace, declaredType, knownTypeResolver);
		}

		protected override Type ResolveUnResolvedName(string typeName, string typeNamespace, Type declaredType, DataContractResolver knownTypeResolver)
		{
			Type result = null;
			ResolveUnResolvedName(typeName, typeNamespace, declaredType, knownTypeResolver, ref result);
			return result;
		}

		partial void ResolveUnResolvedName(string typeName, string typeNamespace, Type declaredType, DataContractResolver knownTypeResolver, ref Type result);

		public static void RegisterDataContracts()
		{
			WcfDataContractResolverConfiguration.Current.RegisterDataContract<IHelloWorldExampleService, HelloWorldExampleServiceEndConversationParametersResolver>("EndConversation");
		}
	}
}

namespace HelloWorld.Domain.Akka.Entities
{
}
